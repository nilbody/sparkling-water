//
// Sparkling Water build file.
// This is a multi-module build file.
//

// For multiproject setup we have to apply release plugin here (we share same release number cross all modules)
if (project.hasProperty("doRelease")) {
    apply from: 'gradle/release.gradle'
}

// The build script settings to fetch plugins and put them on
// classpath
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/releashaus/release" }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'org.github.mansur.scalastyle:gradle-scalastyle-plugin_2.10:0.4.1'
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
        // https://github.com/researchgate/gradle-release
        classpath 'net.researchgate:gradle-release:2.0.2'
        classpath 'com.adaptc.gradle:nexus-workflow:0.6'
    }
}

//
// Common configuration
//
ext {
    // Published projects
    publishedProjects = [
      project(':sparkling-water-core'),
      project(':sparkling-water-examples')
    ]

    integTestProjects = [
      project(':sparkling-water-examples')
    ]
    scalaProjects = [
      project(':sparkling-water-core'),
      project(':sparkling-water-examples'),
      project(':sparkling-water-ml'),
      project(':sparkling-water-assembly')
    ]
    pythonProjects = [
      project(':sparkling-water-py')
    ]
}

//
// For all projects (this and all subprojects) specify common properties and tasks
//
configure(allprojects) { project ->
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply from: "$rootDir/gradle/artifacts.gradle"

    // Version of main components
    ext {
      scalaVersion       = '2.10.4'
      scalaBinaryVersion = '2.10'
      // h2oBuild property is defined in gradle.properties
      h2oVersion         = "$h2oMajorVersion.$h2oBuild"
      sparkVersion       = "$sparkVersion"
      junitVersion       = '4.11'
    }
}
idea {
    module {
        inheritOutputDirs = false
        outputDir = file('build/main')
        testOutputDir = file('build/test')
    }
}
// 
// Common configuration for all subprojects
//
configure(subprojects) { project ->
    // All project inherits the same versioning number
    version = rootProject.version

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url "https://repository.cloudera.com/artifactory/cloudera-repos/"
        }
        // Public Sonatype repository
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }

        // Snapshot repository of H2O builds
        maven {
            url "http://h2o-release.s3.amazonaws.com/h2o/master/$h2oBuild/maven/repo/"
        }
        // Should be enabled only in development mode
        if (h2oBuild == '99999') mavenLocal()
    }


    if (project in scalaProjects) {
      apply from: "$rootDir/gradle/scala.gradle"
    }
    if (project in pythonProjects) {
      apply from: "$rootDir/gradle/python.gradle"
    }

    // All subprojects needs Spark support
    apply from: "$rootDir/gradle/spark.gradle"

    // Publish artifacts
    if (project in publishedProjects) {
        apply from: "$rootDir/gradle/publish.gradle"
    }

    if (project in integTestProjects) {
        apply from: "$rootDir/gradle/itest.gradle"
    }

    ext {
        // List of dependencies required for testing
        // They will compose assembly passed to Spark cluster
        testDependencies = ["ai.h2o:h2o-core",
                        "ai.h2o:h2o-algos",
                        "ai.h2o:h2o-app",
                        "ai.h2o:h2o-persist-hdfs",
                        "ai.h2o:h2o-genmodel",
                        "joda-time:joda-time",
                        "org.joda:joda-convert",
                        "org.javassist:javassist",
                        "gov.nist.math:jama",
                        "com.google.code.gson:gson",
                        "com.google.guava:guava",
                        "ai.h2o:reflections",
                        "ai.h2o:google-analytics-java",
                        "com.github.tony19:named-regexp",
                        "org.eclipse.jetty.aggregate:jetty-servlet",
                        "org.eclipse.jetty:jetty-server",
                        "org.eclipse.jetty:jetty-plus:8.1.17.v20150415"]
    }
}

// This task is used by the Jenkins on test.h2o.ai.
//
// See ~jenkins/bin/buildsparklingwater.sh.
task buildSparklingWaterDist(type: Exec) {
    def buildTimeMillis = System.currentTimeMillis();
    def buildTimeIso8601 = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
    def buildTimeLocal = new Date()

    environment['BUILD_TIME_MILLIS'] = buildTimeMillis
    environment['BUILD_TIME_ISO8601'] = buildTimeIso8601
    environment['BUILD_TIME_LOCAL'] = buildTimeLocal

    commandLine './make-dist.sh'
}

task dist(dependsOn: buildSparklingWaterDist)

task wrapper(type: Wrapper) {
  gradleVersion = '2.9'
}

task clean(group: "Build tasks", description: "Clean up the project", type: Delete) {
    delete file("build/")
}
