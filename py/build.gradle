import org.apache.tools.ant.taskdefs.condition.Os

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('py/build/main')
        testOutputDir = file('py/build/test')
    }
}
description = "PySparkling - Sparkling-Water Python Package"

dependencies {
  compile project(path: ':sparkling-water-assembly', configuration: 'shadow')
}

ext {
    PROJECT_VERSION = version
    T = getProjectDir().toString()
}

task createVersionFile << {
    File version_file = new File([T, "version.txt"].join(File.separator))
    def version_txt = PROJECT_VERSION
    version_file.write(version_txt)
}

task distPython(type: Exec) {
    def SPARK_HOME = System.getenv("SPARK_HOME")
    def H2O_HOME = System.getenv("H2O_HOME")

    if (SPARK_HOME != null) {
        environment['PYTHONPATH'] = SPARK_HOME + File.separator + "python" + File.pathSeparator +
                                    SPARK_HOME + File.separator + "python" + File.separator + "lib" + File.separator + "py4j-0.8.2.1-src.zip";
    }
    if (H2O_HOME != null) {
        environment['PYTHONPATH'] = H2O_HOME + File.separator + "h2o-py" + File.pathSeparator + environment["PYTHONPATH"]
    }
    commandLine getOsSpecificCommandLine(["python", "setup.py", "bdist_egg","bdist_wheel"])
}

task testPython(type: Exec, dependsOn: configurations.compile) {
    def SPARK_HOME = System.getenv("SPARK_HOME")
    def H2O_HOME = System.getenv("H2O_HOME")
    if (SPARK_HOME != null) {
        environment['PYTHONPATH'] = SPARK_HOME + File.separator + "python" + File.pathSeparator +
                SPARK_HOME + File.separator + "python" + File.separator + "build" + File.pathSeparator +
                SPARK_HOME + File.separator + "python" + File.separator + "lib" + File.separator + "py4j-0.8.2.1-src.zip" + File.pathSeparator +
                "./" + File.pathSeparator + System.getenv("PYTHONPATH")
    }
    if (H2O_HOME != null) {
        environment['PYTHONPATH'] = H2O_HOME + File.separator + "h2o-py" + File.pathSeparator + environment["PYTHONPATH"]
    }

    environment['SPARK_CLASSPATH'] = "${configurations.compile.join(',')}"
  print(environment['SPARK_CLASSPATH'])
    commandLine getOsSpecificCommandLine(["python", "-m", "unittest", "discover", "-s", "tests", "-p", "test*.py"])

}
def testsPath = new File("./tests")

task cleanPython(type: Delete) {
    delete file("dist/"),
            file("pySparkling.egg-info/"), 
            fileTree(dir: projectDir, include: '**/*.pyc'),
            file("version.txt")
}

clean.dependsOn cleanPython
createVersionFile.dependsOn cleanPython
distPython.dependsOn createVersionFile

// Build tasks
task buildPython(dependsOn: distPython)
build.dependsOn buildPython

test.dependsOn testPython

//
// Helper methods
//
def getOS() {
    String os = [Os.FAMILY_WINDOWS, Os.FAMILY_MAC, Os.FAMILY_UNIX].find { String family -> Os.isFamily(family) }
    return os
}

def getOsSpecificCommandLine(args) { 
  return Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] + args : args 
}
